version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:5.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-enterprise-kafka:5.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command:
      - bash
      - -c
      - |
        echo "Launching Kafka Server"
        /etc/confluent/docker/run &
        #
        kafka-topics --create --topic delivery_tracking_dest_distance_alerted --partitions 1 --replication-factor 1 --zookeeper zookeeper:2181
        sleep infinity

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  ksql-server:
    image: confluentinc/cp-ksql-server:5.2.1
    container_name: ksql-server
    ports:
      - 8088:8088
    depends_on:
      - kafka
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka:29092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: confluent_rmoff_01
      KSQL_CUB_KAFKA_TIMEOUT: 300
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.2.1
    container_name: ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true

  mysql:
    image: debezium/example-mysql:0.9
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=debezium
      - MYSQL_USER=mysqluser
      - MYSQL_PASSWORD=mysqlpw
    volumes:
      - $PWD/scripts/tracks.sql:/docker-entrypoint-initdb.d/z99_dump.sql

  kafka-mqtt:
    image: confluentinc/cp-kafka-mqtt:latest
    container_name: kafka-mqtt
    depends_on:
      - kafka
    ports:
      - 1883:1883
    environment:
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      KAFKA_MQTT_CONFLUENT_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_MQTT_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      KAFKA_MQTT_TOPIC_REGEX_LIST: delivery_tracking:delivery_tracking

  kafka-mqtt-client:
    image: ruimarinho/mosquitto
    container_name: kafka-mqtt-client
    depends_on:
      - kafka-mqtt
    volumes:
      - $PWD/scripts/mqtt-data:/mqtt-data
    command:
      - sh
      - -c
      - |
        /entrypoint.sh mosquitto &
        awk '{print $$0}' mqtt-data | xargs -I{} mosquitto_pub -h kafka-mqtt -t delivery_tracking -m "{}"
        while true; do sleep 100; done

  kafka-connect:
    image: confluentinc/cp-kafka-connect:5.2.1
    container_name: kafka-connect
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
      - elasticsearch
    ports:
      - 18083:18083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      # Interceptor config
    volumes:
      - $PWD/scripts:/scripts
    command:
      - bash
      - -c
      - |
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        echo "Waiting for Kafka Connect to start listening on $$CONNECT_REST_ADVERTISED_HOST_NAME ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors) -eq 000 ] ; do
        echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://$$CONNECT_REST_ADVERTISED_HOST_NAME:$$CONNECT_REST_PORT/connectors) " (waiting for 200)"
        sleep 5
        done
        nc -vz $$CONNECT_REST_ADVERTISED_HOST_NAME $$CONNECT_REST_PORT
        echo -e "\n--\n+> Creating Kafka Connect Elasticsearch sink"
        /scripts/elasticsearch-sink.sh
        sleep infinity

  connect-debezium:
    image: debezium/connect:0.9.3.Final
    container_name: debezium
    depends_on:
      - kafka
      - mysql
      - schema-registry
    ports:
      - 8083:8083
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - GROUP_ID="debezium-mysql"
      - CONFIG_STORAGE_TOPIC=debezium_connect_configs
      - OFFSET_STORAGE_TOPIC=debezium_connect_offsets
      - STATUS_STORAGE_TOPIC=debezium_connect_status
    volumes:
      - $PWD/scripts:/scripts
    command:
      - bash
      - -c
      - |
        /docker-entrypoint.sh start &
        echo "Waiting for Kafka Connect to start listening on connect-debezium ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://connect-debezium:8083/connectors) -eq 000 ] ; do
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://connect-debezium:8083/connectors) " (waiting for 200)"
          sleep 5
        done
        echo "Waiting for Schema Registry to start listening on schema-registry:8081 ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) -eq 000 ] ; do
          echo -e $$(date) " Schema Registry listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://schema-registry:8081) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n--\n+> Creating Kafka Connect Debezium source"
        /scripts/deb-mysql-source.sh
        sleep infinity

  elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:6.7.0
      container_name: elasticsearch
      ports:
        - 9200:9200
      environment:
        xpack.security.enabled: "false"
        ES_JAVA_OPTS: "-Xms1g -Xmx1g"
      volumes:
       - $PWD/scripts:/scripts
      command:
        - bash
        - -c
        - |
          /usr/local/bin/docker-entrypoint.sh &
          echo "Waiting for Elasticsearch to start ⏳"
          while [ $$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/) -eq 000 ] ; do
            echo -e $$(date) " Elasticsearch listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://localhost:9200/) " (waiting for 200)"
            sleep 5
          done
          echo -e "\n--\n+> Creating Elasticsearch dynamic mapping"
          /scripts/elasticsearch-mapping.sh
          sleep infinity

  kibana:
    image: docker.elastic.co/kibana/kibana:6.7.0
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"
